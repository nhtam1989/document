{"componentChunkName":"component---node-modules-gatsby-theme-document-src-templates-docs-js","path":"/codeblock/docker","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docker\",\n  \"description\": \"This is the meta description for this page\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"docker-basic\"\n  }, \"Docker Basic\"), mdx(\"p\", null, \"CLI Search Images Docker\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker search 'Image Name' # search image tr\\xEAn hub\\ndocker pull 'Image Name' # pull image v\\u1EC1 d\\xF9ng\\ndocker images # list image \\u0111ang c\\xF3\\ndocker container ls --all #list all container \\ndocker exec -it react-app /bin/sh # truy c\\u1EADp v\\xE0o folder source Docker\\ndocker container start react-app # start container\\ndocker container stop react-app # stop container\\ndocker container rm 'Container ID' # Remove container / App\\ndocker image rm -f 'Image ID' # Remove Image ( Remove container tr\\u01B0\\u1EDBc) '-f' --force \\n\\ndocker tag nhtam/image-dev:latest nhtam/image-dev:1.1 // add tag cho docker image\\ndocker push nhtam/image-dev:1.1 // push docker image \\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"NOTE\\n---------------------------------------------------------------\\nCHOKIDAR_USEPOLLING=true #sync source local with docker \\n-d : run docker on background\\n-e : ENV file\\n-v : map folder local => docker\\n-p : set port \\n-f : read file\\n---------------------------------------------------------------\\n\\n- Demo -\\ndocker build -t nhtam/react-app-image .\\ndocker run -d -p 3001:3000 --name react-app nhtam/react-app-image\\n\\ndocker image rm -f nhtam/react-app-image\\ndocker container rm -f react-app\\n\")), mdx(\"h4\", {\n    \"id\": \"docker-advanced\"\n  }, \"Docker Advanced\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Step 1: create Dockerfile\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# -------- Dockerfile Sample -------------\\n# pull the base image\\nFROM node:alpine\\n\\n# set the working direction on Docker\\nWORKDIR /app\\n\\n# install app dependencies\\nCOPY package.json ./\\n\\nRUN npm install\\n\\n# add app\\nCOPY . ./\\n\\n#Port\\nEXPOSE 3000\\n\\n# start app\\nCMD [\\\"npm\\\", \\\"start\\\"]\\n\\n# -------- Dockerfile Sample pull multi Images-------------\\n\\n+ React + Nginx\\n# pull the base image\\nFROM node as build\\n\\n# set the working direction\\nWORKDIR /app\\n\\n# install app dependencies\\nCOPY package.json ./\\n\\nRUN npm install\\n\\n# add app\\nCOPY . ./\\n\\n#Port\\nEXPOSE 3000\\n\\n# start app\\nRUN npm run build\\n\\n# build docker Nginx\\nFROM nginx\\nCOPY --from=build /app/build /usr/share/nginx/html\\n\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Step 2: Build Dockerfile => Image\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker build -t 'name image'  'path folder' \\ndocker build -f ./Dockerfile 'name image' 'path folder' #select Dockerfile\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Step 3: Build Image => Container\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker run -d -p 3001:3000 --name react-app nhtam/react-app # 3001 l\\xE0 port c\\u1EE7a local , 3000 l\\xE0 port cua Docker \\ndocker run -e CHOKIDAR_USEPOLLING=true -v /Users/user/Documents/Source_demo/demo/reactdocker/src/:/app/src -d -p 3000:3000 --name react-app nhtam/react-app-image  #map folder local => docker\\ndocker run --env-file ./.env -v /Users/user/Documents/Source_demo/demo/reactdocker/src/:/app/src -d -p 3000:3000 --name react-app nhtam/react-app-image\\n\")), mdx(\"h4\", {\n    \"id\": \"docker-compose\"\n  }, \"Docker Compose\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CLI docker-compose\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker-compose up -d --build\\ndocker-compose up -f 'path Dockerfile' -d --build\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"File docker-compose.yml \")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# File Name: docker-compose.yml  -- pull image\\nversion: \\\"3\\\"\\nservices:\\n    react-app:\\n        build: .\\n        ports: \\n            - \\\"3000:3000\\\"\\n        volumes:\\n            - ./src:/app/src\\n        # enviroment: \\n        #     - demo=true\\n        env_file:\\n            - ./.env\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"File docker-compose.yml \")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# File Name: docker-compose.yml -- T\\u1EF1 t\\u1EA1o source\\nversion: \\\"3\\\"\\nservices:\\n    react-app:\\n        build: . //folder \\u0111ang \\u0111\\u1EE9ng\\n        ports: \\n            - \\\"3000:3000\\\" //map port local v\\xE0o port docker\\n        volumes:\\n            - ./src:/app/src // mouse folder local v\\xE0o folder docker \\n        # enviroment: \\n        #     - demo=true\\n        env_file:\\n            - ./.env\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#docker-basic","title":"Docker Basic","items":[{"url":"#docker-advanced","title":"Docker Advanced"},{"url":"#docker-compose","title":"Docker Compose"}]}]},"frontmatter":{"title":"Docker","description":"This is the meta description for this page"}}},"pageContext":{"id":"010fe8a6-106c-515f-92c0-2587029c39cc"}},"staticQueryHashes":["2575348879","2936798523","2940813629"]}